{"version":3,"sources":["components/loaders/timeseries.js","components/timeseriesexplorer.js"],"names":["TimeseriesLoader","windowWidth","window","innerWidth","width","viewBox","height","speed","cx","cy","r","TimeSeries","lazy","React","memo","timeseries","timelineDate","date","regionHighlighted","setRegionHighlighted","anchor","setAnchor","stateCodes","t","useTranslation","useState","TIMESERIES_OPTIONS","MONTH","timeseriesOption","setTimeseriesOption","useLocalStorage","chartType","setChartType","isUniform","setIsUniform","isLog","setIsLog","explorerElement","useRef","isVisible","useIsVisible","once","dates","useMemo","today","getIndiaYesterdayISO","pastDates","Object","keys","filter","TWO_WEEKS","cutOffDate","formatISO","sub","parseIndiaDate","weeks","representation","months","className","classnames","stickied","style","display","ref","onClick","entries","TIMESERIES_CHART_TYPES","map","ctype","value","key","htmlFor","id","type","checked","aria-label","onChange","disabled","stateCode","target","districtName","STATE_NAMES","fallback","values","option","selected","size","prevProps","currProps","equal"],"mappings":"0JAsBeA,EAnBU,WACvB,IAAMC,EAAcC,OAAOC,WACrBC,EAAQH,EAAc,IAAM,IAAMA,EAGxC,OACE,kBAAC,IAAD,CACEI,QAAO,cAASD,EAAT,YAJI,KAKXE,OALW,IAMXF,MAAOA,EACPG,MAAO,GAEP,4BAAQC,GAAI,GAAMJ,EAAOK,GAAIH,GAAYI,EAAE,MAC3C,4BAAQF,GAAI,GAAMJ,EAAOK,GAAIH,GAAYI,EAAE,MAC3C,4BAAQF,GAAI,GAAMJ,EAAOK,GAAIH,GAAYI,EAAE,Q,qGCC3CC,EAAaC,gBAAK,kBACtB,uEAyLaC,cAAMC,MAtLrB,YAQI,IAPFC,EAOC,EAPDA,WACMC,EAML,EANDC,KACAC,EAKC,EALDA,kBACAC,EAIC,EAJDA,qBACAC,EAGC,EAHDA,OACAC,EAEC,EAFDA,UACAC,EACC,EADDA,WAEOC,EAAKC,cAALD,EADN,EAE+CE,mBAC9CC,IAAmBC,OAHpB,mBAEMC,EAFN,KAEwBC,EAFxB,OAKiCC,YAAgB,YAAa,SAL9D,mBAKMC,EALN,KAKiBC,EALjB,OAMiCF,YAAgB,aAAa,GAN9D,mBAMMG,EANN,KAMiBC,EANjB,OAOyBJ,YAAgB,SAAS,GAPlD,mBAOMK,EAPN,KAOaC,EAPb,KAQKC,EAAkBC,mBAClBC,EAAYC,uBAAaH,EAAiB,CAACI,MAAM,IAEjDC,EAAQC,mBAAQ,WACpB,IAAMC,EAAQ5B,GAAgB6B,cACxBC,EAAYC,OAAOC,KAAKjC,GAAc,IAAIkC,QAC9C,SAAChC,GAAD,OAAUA,GAAQ2B,KAGpB,GAAIhB,IAAqBF,IAAmBwB,UAAW,CACrD,IAAMC,EAAaC,YAAUC,YAAIC,YAAeV,GAAQ,CAACW,MAAO,IAAK,CACnEC,eAAgB,SAElB,OAAOV,EAAUG,QAAO,SAAChC,GAAD,OAAUA,GAAQkC,KACrC,GAAIvB,IAAqBF,IAAmBC,MAAO,CACxD,IAAMwB,EAAaC,YAAUC,YAAIC,YAAeV,GAAQ,CAACa,OAAQ,IAAK,CACpED,eAAgB,SAElB,OAAOV,EAAUG,QAAO,SAAChC,GAAD,OAAUA,GAAQkC,KAE5C,OAAOL,IACN,CAAC/B,EAAYC,EAAcY,IAS9B,OACE,yBACE8B,UAAWC,IAAW,qBAAsB,CAC1CC,SAAqB,eAAXxC,IAEZyC,MAAO,CAACC,QAAoB,gBAAX1C,EAA2B,OAAS,IACrD2C,IAAK1B,GAEL,yBAAKqB,UAAU,qBACb,yBACEA,UAAWC,IAAW,SAAU,CAC9BC,SAAqB,eAAXxC,IAEZ4C,QAAS,WACP3C,EAAqB,eAAXD,EAA0B,KAAO,gBAG7C,kBAAC,IAAD,OAGF,4BAAKG,EAAE,kBACP,yBAAKmC,UAAU,QACZX,OAAOkB,QAAQC,KAAwBC,KAAI,mCAAEC,EAAF,KAASC,EAAT,YAC1C,yBACEX,UAAS,cAAS3B,IAAcqC,EAAQ,UAAY,IACpDE,IAAKF,EACLJ,QAAS,WACPhC,EAAaoC,KAGf,4BAAK7C,EAAE8C,SAKb,yBAAKX,UAAU,eACb,2BAAOA,UAAU,QAAQnC,EAAE,gBAC3B,yBAAKmC,UAAU,mBACb,2BAAOa,QAAQ,mBAAmBhD,EAAE,YACpC,2BACEiD,GAAG,kBACHC,KAAK,WACLf,UAAU,SACVgB,QAASzC,EACT0C,aAAYpD,EAAE,0CACdqD,SAAU,WACR1C,GAAcD,OAIpB,yBACEyB,UAAS,6BACO,UAAd3B,EAAwB,WAAa,KAGvC,2BAAOwC,QAAQ,sBAAsBhD,EAAE,gBACvC,2BACEiD,GAAG,qBACHC,KAAK,WACLC,QAAuB,UAAd3C,GAAyBI,EAClCuB,UAAU,SACVmB,SAAwB,UAAd9C,EACV6C,SAAU,WACRxC,GAAUD,QAMjBb,GACC,yBAAKoC,UAAU,qBACb,4BAAQW,MAAOnD,EAAkB4D,UAAWF,SA9EjC,SAAC,GAAc,IAAbG,EAAY,EAAZA,OACrB5D,EAAqB,CACnB2D,UAAWC,EAAOV,MAClBW,aAAc,SA4EL1D,EAAW6C,KAAI,SAACW,GACf,OACE,4BAAQT,MAAOS,EAAWR,IAAKQ,GAEzBvD,EADW,OAAduD,EACK,aACAG,IAAYH,WAS/BvC,GACC,kBAAC,WAAD,CAAU2C,SAAU,kBAAC,EAAD,OAClB,kBAACvE,EAAD,eACEmE,UAAW5D,EAAkB4D,WACzB,CAAC/D,aAAY2B,QAAOX,YAAWE,YAAWE,YAKpD,yBAAKuB,UAAU,SACZX,OAAOoC,OAAOzD,KAAoByC,KAAI,SAACiB,GAAD,OACrC,4BACEd,IAAKc,EACLX,KAAK,SACLf,UAAWC,IAAW,CAAC0B,SAAUzD,IAAqBwD,IACtDpB,QAAS,kBAAMnC,EAAoBuD,KAElC7D,EAAE6D,QAKT,yBAAK1B,UAAU,SACb,kBAAC,IAAD,CAAiB4B,KAAM,KACvB,yBAAK5B,UAAU,eACZnC,EAAE,wDAOG,SAACgE,EAAWC,GAC1B,QACGC,IACCD,EAAUtE,kBAAkB4D,UAC5BS,EAAUrE,kBAAkB4D,eAK3BW,IAAMD,EAAUvE,KAAMsE,EAAUtE,SAGhCwE,IAAMD,EAAUpE,OAAQmE,EAAUnE","file":"static/js/TimeSeriesExplorer.e5b95456.chunk.js","sourcesContent":["import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst TimeseriesLoader = () => {\n  const windowWidth = window.innerWidth;\n  const width = windowWidth > 769 ? 480 : windowWidth;\n  const height = 160;\n\n  return (\n    <ContentLoader\n      viewBox={`0 0 ${width} ${height}`}\n      height={height}\n      width={width}\n      speed={2}\n    >\n      <circle cx={0.4 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.5 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.6 * width} cy={height / 2} r=\"5\" />\n    </ContentLoader>\n  );\n};\n\nexport default TimeseriesLoader;\n","import TimeseriesLoader from './loaders/timeseries';\n\nimport {\n  STATE_NAMES,\n  TIMESERIES_CHART_TYPES,\n  TIMESERIES_OPTIONS,\n} from '../constants';\nimport {getIndiaYesterdayISO, parseIndiaDate} from '../utils/commonfunctions';\n\nimport {PinIcon, IssueOpenedIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport {formatISO, sub} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useMemo, useRef, useState, lazy, Suspense} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useIsVisible} from 'react-is-visible';\nimport {useLocalStorage} from 'react-use';\n\nconst TimeSeries = lazy(() =>\n  import('./timeseries' /* webpackChunkName: \"TimeSeries\" */)\n);\n\nfunction TimeSeriesExplorer({\n  timeseries,\n  date: timelineDate,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  stateCodes,\n}) {\n  const {t} = useTranslation();\n  const [timeseriesOption, setTimeseriesOption] = useState(\n    TIMESERIES_OPTIONS.MONTH\n  );\n  const [chartType, setChartType] = useLocalStorage('chartType', 'total');\n  const [isUniform, setIsUniform] = useLocalStorage('isUniform', true);\n  const [isLog, setIsLog] = useLocalStorage('isLog', false);\n  const explorerElement = useRef();\n  const isVisible = useIsVisible(explorerElement, {once: true});\n\n  const dates = useMemo(() => {\n    const today = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= today\n    );\n\n    if (timeseriesOption === TIMESERIES_OPTIONS.TWO_WEEKS) {\n      const cutOffDate = formatISO(sub(parseIndiaDate(today), {weeks: 2}), {\n        representation: 'date',\n      });\n      return pastDates.filter((date) => date >= cutOffDate);\n    } else if (timeseriesOption === TIMESERIES_OPTIONS.MONTH) {\n      const cutOffDate = formatISO(sub(parseIndiaDate(today), {months: 1}), {\n        representation: 'date',\n      });\n      return pastDates.filter((date) => date >= cutOffDate);\n    }\n    return pastDates;\n  }, [timeseries, timelineDate, timeseriesOption]);\n\n  const handleChange = ({target}) => {\n    setRegionHighlighted({\n      stateCode: target.value,\n      districtName: null,\n    });\n  };\n\n  return (\n    <div\n      className={classnames('TimeSeriesExplorer', {\n        stickied: anchor === 'timeseries',\n      })}\n      style={{display: anchor === 'mapexplorer' ? 'none' : ''}}\n      ref={explorerElement}\n    >\n      <div className=\"timeseries-header\">\n        <div\n          className={classnames('anchor', {\n            stickied: anchor === 'timeseries',\n          })}\n          onClick={() => {\n            setAnchor(anchor === 'timeseries' ? null : 'timeseries');\n          }}\n        >\n          <PinIcon />\n        </div>\n\n        <h1>{t('Spread Trends')}</h1>\n        <div className=\"tabs\">\n          {Object.entries(TIMESERIES_CHART_TYPES).map(([ctype, value]) => (\n            <div\n              className={`tab ${chartType === ctype ? 'focused' : ''}`}\n              key={ctype}\n              onClick={() => {\n                setChartType(ctype);\n              }}\n            >\n              <h4>{t(value)}</h4>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"scale-modes\">\n          <label className=\"main\">{t('Scale Modes')}</label>\n          <div className=\"timeseries-mode\">\n            <label htmlFor=\"timeseries-mode\">{t('Uniform')}</label>\n            <input\n              id=\"timeseries-mode\"\n              type=\"checkbox\"\n              className=\"switch\"\n              checked={isUniform}\n              aria-label={t('Checked by default to scale uniformly.')}\n              onChange={() => {\n                setIsUniform(!isUniform);\n              }}\n            />\n          </div>\n          <div\n            className={`timeseries-logmode ${\n              chartType !== 'total' ? 'disabled' : ''\n            }`}\n          >\n            <label htmlFor=\"timeseries-logmode\">{t('Logarithmic')}</label>\n            <input\n              id=\"timeseries-logmode\"\n              type=\"checkbox\"\n              checked={chartType === 'total' && isLog}\n              className=\"switch\"\n              disabled={chartType !== 'total'}\n              onChange={() => {\n                setIsLog(!isLog);\n              }}\n            />\n          </div>\n        </div>\n\n        {stateCodes && (\n          <div className=\"trends-state-name\">\n            <select value={regionHighlighted.stateCode} onChange={handleChange}>\n              {stateCodes.map((stateCode) => {\n                return (\n                  <option value={stateCode} key={stateCode}>\n                    {stateCode === 'TT'\n                      ? t('All States')\n                      : t(STATE_NAMES[stateCode])}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n        )}\n      </div>\n\n      {isVisible && (\n        <Suspense fallback={<TimeseriesLoader />}>\n          <TimeSeries\n            stateCode={regionHighlighted.stateCode}\n            {...{timeseries, dates, chartType, isUniform, isLog}}\n          />\n        </Suspense>\n      )}\n\n      <div className=\"pills\">\n        {Object.values(TIMESERIES_OPTIONS).map((option) => (\n          <button\n            key={option}\n            type=\"button\"\n            className={classnames({selected: timeseriesOption === option})}\n            onClick={() => setTimeseriesOption(option)}\n          >\n            {t(option)}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"alert\">\n        <IssueOpenedIcon size={24} />\n        <div className=\"alert-right\">\n          {t('Tested chart is independent of uniform scaling')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  }\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  if (!equal(currProps.anchor, prevProps.anchor)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(TimeSeriesExplorer, isEqual);\n"],"sourceRoot":""}