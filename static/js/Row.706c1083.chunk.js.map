{"version":3,"sources":["components/tooltip.js","../node_modules/react-feather/dist/icons/info.js","components/row.js"],"names":["FADE_IN","opacity","transform","zIndex","position","pointerEvents","FADE_OUT","Tooltip","data","children","useState","isTooltipVisible","setIsTooltipVisible","transitions","useTransition","from","enter","leave","config","mass","tension","friction","className","style","onMouseEnter","onMouseLeave","map","item","key","props","div","dangerouslySetInnerHTML","__html","replace","_extends","Object","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Info","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","x1","y1","x2","y2","propTypes","PropTypes","string","oneOfType","number","displayName","useBreakpoint","createBreakpoint","S","Cell","memo","statistic","total","getStatistic","delta","spring","useSpring","gentle","classnames","interpolate","formatNumber","Math","floor","abs","prevProps","currProps","equal","DistrictHeaderCell","handleSortClick","sortData","breakpoint","t","useTranslation","onClick","sortColumn","invert","isAscending","title","capitalize","slice","DistrictRow","stateCode","districtName","regionHighlighted","setRegionHighlighted","highlightDistrict","useCallback","produce","draftRegionHighlighted","meta","notes","PRIMARY_STATISTICS","showDistricts","setShowDistricts","useLocalStorage","setSortData","history","useHistory","rowElement","useRef","draftSortData","sortingFunction","districtNameA","districtNameB","districts","localeCompare","highlightState","_setShowDistrict","to","Fragment","STATE_NAMES","formatLastUpdated","last_updated","push","state","sort","a","b","current","scrollIntoView","behavior","block"],"mappings":"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","file":"static/js/Row.706c1083.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {useTransition, animated} from 'react-spring';\n\nconst FADE_IN = {\n  opacity: 1,\n  transform: 'translate3d(0, 0px, 0)',\n  zIndex: 999,\n  position: 'absolute',\n  pointerEvents: 'none',\n};\n\nconst FADE_OUT = {\n  opacity: 0,\n  transform: 'translate3d(0, 2px, 0)',\n  zIndex: 999,\n  position: 'absolute',\n  pointerEvents: 'none',\n};\n\nconst Tooltip = ({data, children}) => {\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n\n  const transitions = useTransition(isTooltipVisible, null, {\n    from: FADE_OUT,\n    enter: FADE_IN,\n    leave: FADE_OUT,\n    config: {\n      mass: 1,\n      tension: 210,\n      friction: 20,\n    },\n  });\n\n  return (\n    <span\n      className=\"Tooltip\"\n      style={{position: 'relative'}}\n      onMouseEnter={() => {\n        setIsTooltipVisible(true);\n      }}\n      onMouseLeave={() => {\n        setIsTooltipVisible(false);\n      }}\n    >\n      {children}\n\n      {transitions.map(({item, key, props}) =>\n        item ? (\n          <animated.div key={key} style={props}>\n            <div className=\"message\">\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: data.replace(/\\n/g, '<br/>'),\n                }}\n              ></p>\n            </div>\n          </animated.div>\n        ) : (\n          <animated.div key={key}></animated.div>\n        )\n      )}\n    </span>\n  );\n};\n\nexport default Tooltip;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Info = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"16\",\n    x2: \"12\",\n    y2: \"12\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"8\",\n    x2: \"12.01\",\n    y2: \"8\"\n  }));\n});\nInfo.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nInfo.displayName = 'Info';\nexport default Info;","import Tooltip from './tooltip';\n\nimport {PRIMARY_STATISTICS, STATE_NAMES} from '../constants';\nimport {\n  capitalize,\n  formatLastUpdated,\n  formatNumber,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport {\n  ClockIcon,\n  GraphIcon,\n  FilterIcon,\n  FoldUpIcon,\n} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useState, useCallback, useRef} from 'react';\nimport {Info} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSpring, animated, config} from 'react-spring';\nimport {createBreakpoint, useLocalStorage} from 'react-use';\n\nconst useBreakpoint = createBreakpoint({S: 768});\n\nfunction PureCell({statistic, data}) {\n  const total = getStatistic(data, 'total', statistic);\n  const delta = getStatistic(data, 'delta', statistic);\n\n  const spring = useSpring(\n    {\n      total: total,\n      delta: delta,\n      from: {\n        total: total,\n        delta: delta,\n      },\n    },\n    config.gentle\n  );\n\n  return (\n    <div className=\"cell statistic\">\n      {statistic !== 'active' && (\n        <animated.div className={classnames('delta', `is-${statistic}`)}>\n          {spring.delta.interpolate((delta) =>\n            delta > 0\n              ? '\\u2191' + formatNumber(Math.floor(delta))\n              : delta < 0\n              ? '\\u2193' + formatNumber(Math.floor(Math.abs(delta)))\n              : ''\n          )}\n        </animated.div>\n      )}\n      <animated.div className=\"total\">\n        {spring.total.interpolate((total) => formatNumber(Math.floor(total)))}\n      </animated.div>\n    </div>\n  );\n}\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data.total, currProps.data.total)) {\n    return false;\n  }\n  if (!equal(prevProps.data.delta, currProps.data.delta)) {\n    return false;\n  }\n  return true;\n};\n\nconst Cell = React.memo(PureCell, isCellEqual);\n\nfunction DistrictHeaderCell({handleSortClick, statistic, sortData}) {\n  const breakpoint = useBreakpoint();\n  const {t} = useTranslation();\n\n  return (\n    <div className=\"cell heading\" onClick={() => handleSortClick(statistic)}>\n      {sortData.sortColumn === statistic && (\n        <div\n          className={classnames('sort-icon', {\n            invert: sortData.isAscending,\n          })}\n        >\n          <FilterIcon size={10} />\n        </div>\n      )}\n      <div\n        className={classnames({\n          [`is-${statistic}`]: breakpoint === 'S',\n        })}\n        title={capitalize(statistic)}\n      >\n        {breakpoint === 'S'\n          ? capitalize(statistic.slice(0, 1))\n          : t(capitalize(statistic))}\n      </div>\n    </div>\n  );\n}\n\nfunction PureDistrictRow({\n  stateCode,\n  districtName,\n  data,\n  regionHighlighted,\n  setRegionHighlighted,\n}) {\n  const {t} = useTranslation();\n\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        })\n      );\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n\n  return (\n    <div\n      className={classnames('row', 'district', {\n        'is-highlighted': regionHighlighted?.districtName === districtName,\n      })}\n      onMouseEnter={highlightDistrict}\n    >\n      <div className=\"cell\">\n        <div className=\"state-name\">{t(districtName)}</div>\n        {data?.meta?.notes && (\n          <Tooltip {...{data: data.meta.notes}}>\n            <Info size={16} />\n          </Tooltip>\n        )}\n      </div>\n\n      {PRIMARY_STATISTICS.map((statistic) => (\n        <Cell key={statistic} {...{statistic}} data={data} />\n      ))}\n    </div>\n  );\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.['last_updated'], currProps.data?.['last_updated'])\n  ) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n    (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) ||\n      equal(currProps.regionHighlighted.districtName, currProps.districtName))\n  ) {\n    return false;\n  }\n  return true;\n};\nconst DistrictRow = React.memo(PureDistrictRow, isDistrictRowEqual);\n\nfunction Row({stateCode, data, regionHighlighted, setRegionHighlighted}) {\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useLocalStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const rowElement = useRef();\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      setSortData(\n        produce(sortData, (draftSortData) => {\n          draftSortData.isAscending = !sortData.isAscending;\n          draftSortData.sortColumn = statistic;\n        })\n      );\n    },\n    [sortData, setSortData]\n  );\n\n  const sortingFunction = useCallback(\n    (districtNameA, districtNameB) => {\n      if (sortData.sortColumn !== 'districtName') {\n        return sortData.isAscending\n          ? getStatistic(\n              data.districts[districtNameA],\n              'total',\n              sortData.sortColumn\n            ) -\n              getStatistic(\n                data.districts[districtNameB],\n                'total',\n                sortData.sortColumn\n              )\n          : getStatistic(\n              data.districts[districtNameB],\n              'total',\n              sortData.sortColumn\n            ) -\n              getStatistic(\n                data.districts[districtNameA],\n                'total',\n                sortData.sortColumn\n              );\n      } else {\n        return sortData.isAscending\n          ? districtNameA.localeCompare(districtNameB)\n          : districtNameB.localeCompare(districtNameA);\n      }\n    },\n    [sortData, data]\n  );\n\n  const highlightState = useCallback(() => {\n    if (regionHighlighted.stateCode !== stateCode) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = null;\n        })\n      );\n    }\n  }, [regionHighlighted, setRegionHighlighted, stateCode]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  const spring = useSpring({\n    from: {opacity: 0},\n    to: {opacity: 1},\n    config: config.gentle,\n  });\n\n  return (\n    <React.Fragment>\n      <animated.div\n        className={classnames(\n          'row',\n          {'is-total': stateCode === 'TT'},\n          {'is-highlighted': regionHighlighted?.stateCode === stateCode}\n        )}\n        onMouseEnter={highlightState}\n        onClick={_setShowDistrict}\n        style={spring}\n        ref={rowElement}\n      >\n        <div className=\"cell\">\n          <div className=\"state-name\">{t(STATE_NAMES[stateCode])}</div>\n          {data?.meta?.notes && (\n            <Tooltip {...{data: data.meta.notes}}>\n              <Info size={16} />\n            </Tooltip>\n          )}\n        </div>\n\n        {PRIMARY_STATISTICS.map((statistic) => (\n          <Cell key={statistic} {...{data, statistic}} />\n        ))}\n      </animated.div>\n\n      {showDistricts && (\n        <React.Fragment>\n          <div className=\"state-meta\">\n            {data?.meta?.['last_updated'] && (\n              <p className=\"last-updated\">\n                <ClockIcon />\n                {capitalize(\n                  `${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`\n                )}\n              </p>\n            )}\n            <div\n              className=\"state-page\"\n              onClick={() => {\n                history.push(`state/${stateCode}`);\n              }}\n            >\n              <GraphIcon />\n              <span>\n                {t('See more details on {{state}}', {\n                  state: stateCode,\n                })}\n              </span>\n            </div>\n          </div>\n\n          <div className={classnames('row', 'heading')}>\n            <div\n              className=\"cell heading\"\n              onClick={() => handleSortClick('districtName')}\n            >\n              <div className=\"district-name\">{t('District')}</div>\n              {sortData.sortColumn === 'districtName' && (\n                <div\n                  className={classnames('sort-icon', {\n                    invert: !sortData.isAscending,\n                  })}\n                >\n                  <FilterIcon size={10} />\n                </div>\n              )}\n            </div>\n\n            {PRIMARY_STATISTICS.map((statistic) => (\n              <DistrictHeaderCell\n                key={statistic}\n                {...{statistic, sortData, handleSortClick}}\n              />\n            ))}\n          </div>\n        </React.Fragment>\n      )}\n\n      {showDistricts &&\n        Object.keys(data.districts)\n          .sort((a, b) => sortingFunction(a, b))\n          .map((districtName) => (\n            <DistrictRow\n              key={districtName}\n              {...{\n                districtName,\n                regionHighlighted,\n                setRegionHighlighted,\n                stateCode,\n              }}\n              data={data.districts[districtName]}\n            />\n          ))}\n\n      {showDistricts && (\n        <div className=\"spacer\">\n          <p>{`End of ${STATE_NAMES[stateCode]}'s districts`}</p>\n          <div\n            className=\"fold\"\n            onClick={() => {\n              setShowDistricts(false);\n              rowElement.current.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start',\n              });\n            }}\n          >\n            <FoldUpIcon />\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.stateCode,\n      currProps.regionHighlighted.stateCode\n    ) &&\n      equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode)) ||\n    equal(currProps.regionHighlighted.stateCode, currProps.stateCode)\n  ) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n      equal(\n        prevProps.regionHighlighted.districtName,\n        prevProps.districtName\n      )) ||\n    equal(currProps.regionHighlighted.districtName, currProps.districtName)\n  ) {\n    return false;\n  } else return true;\n};\n\nexport default React.memo(Row, isEqual);\n"],"sourceRoot":""}