{"version":3,"sources":["hooks/useresizeobserver.js","components/maplegend.js","components/mapvisualizer.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","MapLegend","data","mapScale","mapOption","statistic","t","useTranslation","svgRef","useRef","wrapperRef","svg","select","getBoundingClientRect","width","height","MAP_OPTIONS","HOTSPOTS","transition","duration","D3_TRANSITION_DURATION","attr","selectAll","remove","text","domainMax","domain","join","d","yScale","copy","range","call","axisRight","tickSize","tickPadding","tickValues","tickFormat","format","style","g","color","title","marginTop","marginRight","marginBottom","marginLeft","ticks","ordinalWeights","x","tickAdjust","interpolate","n","Math","min","length","rangeRound","quantize","ramp","toDataURL","interpolator","Object","assign","interpolateRound","undefined","round","map","i","quantile","invertExtent","thresholds","quantiles","thresholdFormat","scaleLinear","append","widthScale","reduce","a","b","xPos","w","slice","acc","scaleOrdinal","enter","scaleBand","max","bandwidth","axisBottom","on","node","legend","PER_MILLION","capitalize","TOTAL","Number","isInteger","formatNumber","ZONES","className","MAP_LEGEND_HEIGHT","id","preserveAspectRatio","position","canvas","context","getContext","fillStyle","fillRect","colorInterpolator","confirmed","interpolateReds","active","interpolateBlues","recovered","interpolateGreens","deceased","interpolateGreys","tested","interpolatePurples","getTotalStatistic","normalizer","getStatistic","MapVisualizer","currentMap","changeMap","regionHighlighted","setRegionHighlighted","isCountryLoaded","mapMeta","MAP_META","code","geoData","useSWR","geoDataFile","file","json","revalidateOnFocus","suspense","statisticMax","useMemo","stateCodes","keys","filter","stateCode","includes","view","MAP_VIEWS","STATES","option","STATE_POPULATIONS_MIL","districts","values","districtData","statisticTotal","ZONE_COLORS","scaleSqrt","clamp","nice","scaleSequential","topology","topojson","objects","graphObjectStates","graphObjectDistricts","projection","geoMercator","fitSize","path","geoPath","features","mapType","MAP_TYPES","COUNTRY","f","district","properties","state","st_nm","obj","fillColor","STATE_CODES","stateData","zone","strokeColor","COLORS","onceTouchedRegion","sel","districtName","update","event","stopPropagation","STATE","capitalizeAll","circlesData","value","UNKNOWN_DISTRICT_KEY","sort","centroid","meshStates","meshDistricts","DISTRICTS","STATE_NAMES","each","highlighted","this","parentNode","appendChild","Fragment","viewBox","colorInterpolationFilters","type"],"mappings":"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","file":"static/js/MapVisualizer.66022ad5.chunk.js","sourcesContent":["import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import {\n  D3_TRANSITION_DURATION,\n  MAP_LEGEND_HEIGHT,\n  MAP_OPTIONS,\n  // ZONE_COLORS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useresizeobserver';\nimport {capitalize, formatNumber} from '../utils/commonfunctions';\n\nimport {range, quantile} from 'd3-array';\nimport {axisRight, axisBottom} from 'd3-axis';\nimport {format} from 'd3-format';\nimport {interpolate, interpolateRound, quantize} from 'd3-interpolate';\nimport {scaleLinear, scaleOrdinal, scaleBand} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport React, {useEffect, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction MapLegend({data, mapScale, mapOption, statistic}) {\n  const {t} = useTranslation();\n\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // const totalZones = useMemo(() => {\n  //   return Object.values(data).reduce(\n  //     (counts, stateData) => {\n  //       if (stateData?.districts) {\n  //         Object.values(stateData.districts).forEach((districtData) => {\n  //           if (districtData?.zone?.status)\n  //             counts[districtData.zone.status] += 1;\n  //         });\n  //       }\n  //       return counts;\n  //     },\n  //     Object.keys(ZONE_COLORS).reduce((count, zone) => {\n  //       count[zone] = 0;\n  //       return count;\n  //     }, {})\n  //   );\n  // }, [data]);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    let {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    if (!width || !height)\n      ({width, height} = wrapperRef.current.getBoundingClientRect());\n\n    // if (mapOption === MAP_OPTIONS.ZONES) {\n    //   svg.call(() =>\n    //     legend({\n    //       svg: svg,\n    //       color: mapScale,\n    //       width: width,\n    //       height: height,\n    //       tickValues: [],\n    //       marginLeft: 2,\n    //       marginRight: 20,\n    //       ordinalWeights: Object.values(totalZones),\n    //     })\n    //   );\n    // }\n    if (mapOption === MAP_OPTIONS.HOTSPOTS) {\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n      svg\n        .select('.ramp')\n        .transition(t)\n        .attr('opacity', 0)\n        .attr('xlink:href', null);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .transition(t)\n        .attr('opacity', 0)\n        .remove();\n      svg.selectAll('.axis > *:not(.axistext)').remove();\n      svg.select('.axistext').text('');\n\n      const domainMax = mapScale.domain()[1];\n\n      const legend = svg\n        .select('.circles')\n        .attr('transform', `translate(48,40)`)\n        .attr('text-anchor', 'middle');\n\n      legend\n        .selectAll('circle')\n        .data([domainMax / 10, (domainMax * 2) / 5, domainMax])\n        .join('circle')\n        .attr('fill', 'none')\n        .attr('stroke', '#ccc')\n        .transition(t)\n        .attr('cy', (d) => -mapScale(d))\n        .attr('r', mapScale);\n\n      const yScale = mapScale.copy().range([0, -2 * mapScale(domainMax)]);\n\n      svg\n        .select('.circleAxis')\n        .attr('transform', `translate(48,50)`)\n        .transition(t)\n        .call(\n          axisRight(yScale)\n            .tickSize(0)\n            .tickPadding(0)\n            .tickValues([domainMax / 10, (domainMax * 2) / 5, domainMax])\n            .tickFormat(format('0~s'))\n        )\n        .selectAll('.tick text')\n        .style('text-anchor', 'middle');\n\n      svg.select('.circleAxis').call((g) => g.select('.domain').remove());\n    } else {\n      svg.call(() =>\n        legend({\n          svg: svg,\n          color: mapScale,\n          title:\n            mapOption === MAP_OPTIONS.PER_MILLION\n              ? `${t(capitalize(statistic))} ${t('cases per million')}`\n              : `${t(capitalize(statistic))} ${t('cases')}`,\n          width: width,\n          height: height,\n          ticks: 5,\n          tickFormat: function (d, i, n) {\n            if (mapOption === MAP_OPTIONS.TOTAL && !Number.isInteger(d)) return;\n            if (i === n.length - 1) return formatNumber(d) + '+';\n            return formatNumber(d);\n          },\n          marginLeft: 2,\n          marginRight: 20,\n        })\n      );\n    }\n    svg.attr('class', mapOption === MAP_OPTIONS.ZONES ? 'zone' : '');\n  }, [t, dimensions, mapScale, mapOption, statistic]); // totalZones\n\n  return (\n    <div\n      className=\"svg-parent maplegend\"\n      style={{height: MAP_LEGEND_HEIGHT}}\n      ref={wrapperRef}\n    >\n      <svg id=\"legend\" preserveAspectRatio=\"xMidYMid meet\" ref={svgRef}>\n        <image className=\"ramp\" />\n        <g className=\"bars\"></g>\n        <g className=\"circles\"></g>\n        <g className=\"circleAxis\"></g>\n        <g className=\"axis\">\n          <text className=\"axistext\" />\n        </g>\n      </svg>\n      <canvas\n        className=\"color-scale\"\n        style={{position: 'absolute', height: 0}}\n      />\n    </div>\n  );\n}\n\nexport default MapLegend;\n\nfunction legend({\n  svg,\n  color,\n  title,\n  tickSize = 6,\n  width = 320,\n  height = 44 + tickSize,\n  marginTop = 18,\n  marginRight = 0,\n  marginBottom = 16 + tickSize,\n  marginLeft = 0,\n  ticks = width / 64,\n  tickFormat,\n  tickValues,\n  ordinalWeights,\n} = {}) {\n  svg.selectAll('.circles > *').remove();\n  svg.selectAll('.circleAxis > *').remove();\n  const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n  let tickAdjust = (g) => {\n    const ticks = g.selectAll('.tick line');\n    ticks.attr('y1', marginTop + marginBottom - height);\n    // select(ticks.nodes()[ticks.size() - 1]).remove();\n  };\n  let x;\n\n  // Continuous\n  if (color.interpolate) {\n    const n = Math.min(color.domain().length, color.range().length);\n\n    x = color\n      .copy()\n      .rangeRound(quantize(interpolate(marginLeft, width - marginRight), n));\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr(\n        'xlink:href',\n        ramp(color.copy().domain(quantize(interpolate(0, 1), n))).toDataURL()\n      );\n  }\n\n  // Sequential\n  else if (color.interpolator) {\n    svg\n      .select('.bars')\n      .selectAll('rect')\n      .transition(t)\n      .attr('opacity', 0)\n      .remove();\n\n    x = Object.assign(\n      color\n        .copy()\n        .interpolator(interpolateRound(marginLeft, width - marginRight)),\n      {\n        range() {\n          return [marginLeft, width - marginRight];\n        },\n      }\n    );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr('xlink:href', ramp(color.interpolator()).toDataURL())\n      .transition(t)\n      .attr('opacity', 1);\n\n    // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        const n = Math.round(ticks + 1);\n        tickValues = range(n).map((i) => quantile(color.domain(), i / (n - 1)));\n      }\n      if (typeof tickFormat !== 'function') {\n        tickFormat = format(tickFormat === undefined ? ',f' : tickFormat);\n      }\n    }\n  }\n\n  // Threshold\n  else if (color.invertExtent) {\n    const thresholds = color.thresholds\n      ? color.thresholds() // scaleQuantize\n      : color.quantiles\n      ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n    const thresholdFormat =\n      tickFormat === undefined\n        ? (d) => d\n        : typeof tickFormat === 'string'\n        ? format(tickFormat)\n        : tickFormat;\n\n    x = scaleLinear()\n      .domain([-1, color.range().length - 1])\n      .rangeRound([marginLeft, width - marginRight]);\n\n    svg\n      .append('g')\n      .selectAll('rect')\n      .data(color.range())\n      .join('rect')\n      .attr('x', (d, i) => x(i - 1))\n      .attr('y', marginTop)\n      .attr('width', (d, i) => x(i) - x(i - 1))\n      .attr('height', height - marginTop - marginBottom)\n      .attr('fill', (d) => d);\n\n    tickValues = range(-1, thresholds.length);\n    tickFormat = (i) => {\n      if (i === -1) return thresholdFormat(1);\n      else if (i === thresholds.length - 1) return;\n      else if (i === thresholds.length - 2)\n        return thresholdFormat(thresholds[i] + '+', i);\n      return thresholdFormat(thresholds[i], i);\n    };\n  }\n\n  // Ordinal\n  else {\n    svg\n      .select('.ramp')\n      .transition(t)\n      .attr('opacity', 0)\n      .attr('xlink:href', null);\n    if (!ordinalWeights) {\n      x = scaleBand()\n        .domain(color.domain())\n        .rangeRound([marginLeft, width - marginRight]);\n      svg\n        .selectAll('rect')\n        .data(color.domain())\n        .join('rect')\n        .attr('x', x)\n        .attr('y', marginTop)\n        .attr('width', Math.max(0, x.bandwidth() - 1))\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color);\n    } else {\n      const widthScale = scaleLinear()\n        .domain([0, ordinalWeights.reduce((a, b) => a + b)])\n        .rangeRound([0, width - marginLeft - marginRight]);\n\n      const xPos = ordinalWeights.map((w, i) =>\n        ordinalWeights\n          .slice(0, i)\n          .reduce((acc, w) => acc + widthScale(w), marginLeft)\n      );\n\n      x = scaleOrdinal().domain(color.domain()).range(xPos);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .data(color.domain())\n        .join((enter) =>\n          enter\n            .append('rect')\n            .attr('x', x)\n            .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        )\n        .attr('y', marginTop)\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color)\n        .transition(t)\n        .attr('x', x)\n        .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        .attr('opacity', 1);\n    }\n\n    tickAdjust = () => {};\n  }\n\n  svg\n    .select('.axis')\n    .attr('transform', `translate(0,${height - marginBottom})`)\n    .transition(t)\n    .attr('class', 'axis')\n    .call(\n      axisBottom(x)\n        .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n        .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n        .tickSize(tickSize)\n        .tickValues(tickValues)\n    )\n    .on('start', () => {\n      svg.call(tickAdjust).call((svg) => svg.select('.domain').remove());\n    })\n    .call((g) =>\n      g\n        .select('.axistext')\n        .attr('class', 'axistext')\n        .attr('x', marginLeft)\n        .attr('y', marginTop + marginBottom - height - 6)\n        .attr('fill', 'currentColor')\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(title)\n    );\n\n  return svg.node();\n}\n\nfunction ramp(color, n = 256) {\n  // const canvas = document.createElement('canvas');\n  const canvas = select('.color-scale').node();\n  const context = ((canvas.width = n), (canvas.height = 1), canvas).getContext(\n    '2d'\n  );\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n  return canvas;\n}\n","import MapLegend from './maplegend';\n\nimport {\n  COLORS,\n  D3_TRANSITION_DURATION,\n  MAP_META,\n  MAP_TYPES,\n  MAP_OPTIONS,\n  MAP_VIEWS,\n  STATE_CODES,\n  STATE_NAMES,\n  STATE_POPULATIONS_MIL,\n  UNKNOWN_DISTRICT_KEY,\n  ZONE_COLORS,\n} from '../constants';\nimport {\n  capitalizeAll,\n  formatNumber,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport {max} from 'd3-array';\nimport {json} from 'd3-fetch';\nimport {geoMercator, geoPath} from 'd3-geo';\nimport {scaleOrdinal, scaleSqrt, scaleSequential} from 'd3-scale';\nimport {\n  interpolateReds,\n  interpolateBlues,\n  interpolateGreens,\n  interpolateGreys,\n  interpolatePurples,\n} from 'd3-scale-chromatic';\nimport {select, event} from 'd3-selection';\nimport {transition} from 'd3-transition';\nimport React, {useEffect, useMemo, useRef} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport useSWR from 'swr';\nimport * as topojson from 'topojson';\n\nconst [width, height] = [432, 488];\n\nconst colorInterpolator = {\n  confirmed: (t) => interpolateReds(t * 0.85),\n  active: (t) => interpolateBlues(t * 0.85),\n  recovered: (t) => interpolateGreens(t * 0.85),\n  deceased: (t) => interpolateGreys(t * 0.85),\n  tested: (t) => interpolatePurples(t * 0.85),\n};\n\nconst getTotalStatistic = (data, statistic, normalizer = 1) => {\n  return getStatistic(data, 'total', statistic, normalizer);\n};\n\nfunction MapVisualizer({\n  currentMap,\n  data,\n  changeMap,\n  regionHighlighted,\n  setRegionHighlighted,\n  statistic,\n  isCountryLoaded,\n}) {\n  const {t} = useTranslation();\n  const svgRef = useRef(null);\n\n  const mapMeta = MAP_META[currentMap.code];\n\n  const {data: geoData} = useSWR(\n    mapMeta.geoDataFile,\n    async (file) => {\n      return await json(file);\n    },\n    {revalidateOnFocus: false, suspense: true}\n  );\n\n  const statisticMax = useMemo(() => {\n    const stateCodes = Object.keys(data).filter(\n      (stateCode) =>\n        stateCode !== 'TT' && Object.keys(MAP_META).includes(stateCode)\n    );\n    return currentMap.view === MAP_VIEWS.STATES\n      ? max(stateCodes, (stateCode) =>\n          getTotalStatistic(\n            data[stateCode],\n            statistic,\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? STATE_POPULATIONS_MIL[stateCode]\n              : 1\n          )\n        )\n      : max(stateCodes, (stateCode) =>\n          data[stateCode]?.districts\n            ? max(Object.values(data[stateCode].districts), (districtData) =>\n                getTotalStatistic(districtData, statistic)\n              )\n            : 0\n        );\n  }, [data, currentMap.option, currentMap.view, statistic]);\n\n  const statisticTotal = useMemo(() => {\n    return getTotalStatistic(\n      data[currentMap.code],\n      statistic,\n      currentMap.option === MAP_OPTIONS.PER_MILLION\n        ? STATE_POPULATIONS_MIL[currentMap.code]\n        : 1\n    );\n  }, [data, currentMap.code, currentMap.option, statistic]);\n\n  const mapScale = useMemo(() => {\n    if (currentMap.option === MAP_OPTIONS.ZONES) {\n      return scaleOrdinal(Object.keys(ZONE_COLORS), Object.values(ZONE_COLORS));\n    } else if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      return scaleSqrt([0, Math.max(statisticMax, 1)], [0, 40])\n        .clamp(true)\n        .nice(3);\n    } else {\n      return scaleSequential(\n        [0, Math.max(1, statisticMax)],\n        colorInterpolator[statistic]\n      ).clamp(true);\n    }\n  }, [currentMap.option, statistic, statisticMax]);\n\n  useEffect(() => {\n    const topology = topojson.feature(\n      geoData,\n      geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]\n    );\n\n    const svg = select(svgRef.current);\n\n    const projection = geoMercator().fitSize([width, height], topology);\n    const path = geoPath(projection);\n\n    let features =\n      currentMap.view === MAP_VIEWS.STATES\n        ? topojson.feature(geoData, geoData.objects[mapMeta.graphObjectStates])\n            .features\n        : mapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.option === MAP_OPTIONS.HOTSPOTS\n        ? [\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features,\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features,\n          ]\n        : topojson.feature(\n            geoData,\n            geoData.objects[mapMeta.graphObjectDistricts]\n          ).features;\n\n    // Add id to each feature\n    features = features.map((f) => {\n      const district = f.properties.district;\n      const state = f.properties.st_nm;\n      const obj = Object.assign({}, f);\n      obj.id = `${currentMap.code}-${state}${district ? '-' + district : ''}`;\n      return obj;\n    });\n\n    const fillColor = (d) => {\n      const stateCode = STATE_CODES[d.properties.st_nm];\n      const district = d.properties.district;\n      const stateData = data[stateCode];\n      const districtData = stateData?.districts?.[district];\n      let n;\n      if (currentMap.option === MAP_OPTIONS.ZONES) {\n        n = districtData?.zone || 0;\n      } else {\n        if (district) n = getTotalStatistic(districtData, statistic);\n        else\n          n = getTotalStatistic(\n            stateData,\n            statistic,\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? STATE_POPULATIONS_MIL[stateCode]\n              : 1\n          );\n      }\n      const color = n === 0 ? '#ffffff00' : mapScale(n);\n      return color;\n    };\n\n    const strokeColor = (d) => {\n      return currentMap.option === MAP_OPTIONS.ZONES\n        ? '#343a40'\n        : COLORS[statistic];\n    };\n\n    /* Draw map */\n    const t = transition().duration(D3_TRANSITION_DURATION);\n    let onceTouchedRegion = null;\n    const regionSelection = svg\n      .select('.regions')\n      .selectAll('path')\n      .data(\n        currentMap.option !== MAP_OPTIONS.HOTSPOTS ? features : [],\n        (d) => d.id\n      )\n      .join(\n        (enter) => {\n          const sel = enter\n            .append('path')\n            .attr('d', path)\n            .attr('stroke-width', 1.8)\n            .attr('stroke-opacity', 0)\n            .style('cursor', 'pointer')\n            .on('mouseenter', (d) => {\n              setRegionHighlighted({\n                stateCode: STATE_CODES[d.properties.st_nm],\n                districtName: d.properties.district,\n              });\n            })\n            .on('mouseleave', (d) => {\n              if (onceTouchedRegion === d) onceTouchedRegion = null;\n            })\n            .on('touchstart', (d) => {\n              if (onceTouchedRegion === d) onceTouchedRegion = null;\n              else onceTouchedRegion = d;\n            })\n            .attr('fill', fillColor)\n            .attr('stroke', strokeColor);\n          sel.append('title');\n          return sel;\n        },\n        (update) =>\n          update.call((update) =>\n            update\n              .transition(t)\n              .attr('fill', fillColor)\n              .attr('stroke', strokeColor)\n          )\n      )\n      .attr('pointer-events', 'all')\n      .on('click', (d) => {\n        event.stopPropagation();\n        const stateCode = STATE_CODES[d.properties.st_nm];\n        if (\n          onceTouchedRegion ||\n          mapMeta.mapType === MAP_TYPES.STATE ||\n          !data[stateCode]?.districts\n        )\n          return;\n        // Disable pointer events till the new map is rendered\n        svg.attr('pointer-events', 'none');\n        svg.select('.regions').selectAll('path').attr('pointer-events', 'none');\n        // Switch map\n        changeMap(STATE_CODES[d.properties.st_nm]);\n      });\n\n    regionSelection.select('title').text((d) => {\n      if (currentMap.option === MAP_OPTIONS.TOTAL) {\n        const state = d.properties.st_nm;\n        const stateCode = STATE_CODES[state];\n        const district = d.properties.district;\n\n        const stateData = data[stateCode];\n        const districtData = stateData?.districts?.[district];\n        let n;\n        if (district) n = getTotalStatistic(districtData, statistic);\n        else n = getTotalStatistic(stateData, statistic);\n        return (\n          formatNumber(100 * (n / (statisticTotal || 0.001))) +\n          '% from ' +\n          capitalizeAll(district ? district : state)\n        );\n      }\n    });\n\n    svg\n      .transition()\n      .duration(mapMeta.mapType === MAP_TYPES.STATE ? t.duration() / 2 : 0)\n      .on('end', () =>\n        svg.attr('class', currentMap.option === MAP_OPTIONS.ZONES ? 'zone' : '')\n      );\n\n    /* ----------BUBBLE MAP----------*/\n    let circlesData = [];\n    if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      circlesData = features\n        .map((d) => {\n          const stateCode = STATE_CODES[d.properties.st_nm];\n          const district = d.properties.district;\n\n          const stateData = data[stateCode];\n          const districtData = stateData?.districts?.[district];\n          if (district) d.value = getTotalStatistic(districtData, statistic);\n          else\n            d.value = getTotalStatistic(\n              stateData?.districts?.[UNKNOWN_DISTRICT_KEY],\n              statistic\n            );\n          return d;\n        })\n        .sort((a, b) => b.value - a.value);\n    }\n\n    svg\n      .select('.circles')\n      .selectAll('circle')\n      .data(circlesData, (d) => d.id)\n      .join((enter) =>\n        enter\n          .append('circle')\n          .attr('transform', (d) => `translate(${path.centroid(d)})`)\n          .attr('fill-opacity', 0.5)\n          .style('cursor', 'pointer')\n          .attr('pointer-events', 'all')\n          .on('mouseenter', (d) => {\n            setRegionHighlighted({\n              stateCode: STATE_CODES[d.properties.st_nm],\n              districtName: d.properties.district || UNKNOWN_DISTRICT_KEY,\n            });\n          })\n          .on('click', () => {\n            event.stopPropagation();\n          })\n      )\n      .transition(t)\n      .attr('fill', COLORS[statistic] + '70')\n      .attr('stroke', COLORS[statistic] + '70')\n      .attr('r', (d) => mapScale(d.value));\n    /* ------------------------------*/\n\n    let meshStates = [];\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n      meshStates = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates]),\n      ];\n      meshStates[0].id = mapMeta.graphObjectStates;\n    }\n    let meshDistricts = [];\n    if (currentMap.view === MAP_VIEWS.DISTRICTS) {\n      // Add id to mesh\n      meshDistricts = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts]),\n      ];\n      meshDistricts[0].id = mapMeta.graphObjectDistricts;\n    }\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.state-borders'\n          : '.district-borders'\n      )\n      .attr('fill', 'none')\n      .attr('stroke-width', function () {\n        return mapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n          ? 0\n          : 1.5;\n      })\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshStates : meshDistricts,\n        (d) => d.id\n      )\n      .join((enter) => enter.append('path').attr('d', path))\n      .transition(t)\n      .attr('stroke', () => {\n        if (currentMap.option === MAP_OPTIONS.ZONES) {\n          return '#00000060';\n        } else {\n          return COLORS[statistic] + '30';\n        }\n      });\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.district-borders'\n          : '.state-borders'\n      )\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshDistricts : meshStates,\n        (d) => d.id\n      )\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('d', path)\n          .attr('fill', 'none')\n          .attr('stroke-width', 1.5)\n      )\n      .transition(t)\n      .attr('stroke', '#343a4050');\n\n    // Reset on tapping outside map\n    svg.attr('pointer-events', 'auto').on('click', () => {\n      if (mapMeta.mapType !== MAP_TYPES.STATE) {\n        setRegionHighlighted({\n          stateCode: 'TT',\n          districtName: null,\n        });\n      }\n    });\n  }, [\n    geoData,\n    data,\n    mapMeta,\n    currentMap,\n    setRegionHighlighted,\n    changeMap,\n    isCountryLoaded,\n    mapScale,\n    statistic,\n    statisticTotal,\n  ]);\n\n  useEffect(() => {\n    const state = STATE_NAMES[regionHighlighted.stateCode];\n    const district = regionHighlighted.districtName;\n\n    const svg = select(svgRef.current);\n    if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      svg\n        .select('.circles')\n        .selectAll('circle')\n        .attr('fill-opacity', (d) => {\n          const highlighted =\n            state === d.properties.st_nm &&\n            (!district ||\n              district === d.properties?.district ||\n              (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\n          return highlighted ? 1 : 0.5;\n        });\n    } else {\n      svg\n        .select('.regions')\n        .selectAll('path')\n        .each(function (d) {\n          const highlighted =\n            state === d.properties.st_nm &&\n            (currentMap.view === MAP_VIEWS.STATES ||\n              district === d.properties?.district);\n          if (highlighted) this.parentNode.appendChild(this);\n          select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n        });\n    }\n  }, [\n    geoData,\n    data,\n    currentMap.option,\n    currentMap.view,\n    regionHighlighted.stateCode,\n    regionHighlighted.districtName,\n    statistic,\n  ]);\n\n  return (\n    <React.Fragment>\n      <div className=\"svg-parent\">\n        <svg\n          id=\"chart\"\n          viewBox={`0 0 ${width} ${height}`}\n          preserveAspectRatio=\"xMidYMid meet\"\n          ref={svgRef}\n        >\n          <g className=\"regions\" />\n          <g className=\"state-borders\" />\n          {currentMap.view === MAP_VIEWS.DISTRICTS && (\n            <g className=\"district-borders\" />\n          )}\n          {currentMap.option === MAP_OPTIONS.HOTSPOTS && (\n            <g className=\"circles\" />\n          )}\n        </svg>\n        {mapMeta.mapType === MAP_TYPES.STATE &&\n          !!getTotalStatistic(\n            data[currentMap.code]?.districts?.[UNKNOWN_DISTRICT_KEY],\n            statistic\n          ) && (\n            <div className=\"disclaimer\">\n              <Icon.AlertCircle />\n              {t('District-wise {{statistic}} numbers need reconciliation', {\n                statistic: t(statistic),\n              })}\n            </div>\n          )}\n      </div>\n\n      {mapScale && (\n        <MapLegend\n          data={data}\n          mapScale={mapScale}\n          mapOption={currentMap.option}\n          statistic={statistic}\n        />\n      )}\n\n      <svg style={{position: 'absolute', height: 0}}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549  0           0            0  0.08627451\n                      0           0.91372549  0            0  0.08627451\n                      0           0           0.854901961  0  0.145098039\n                      0           0           0            1  0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n    </React.Fragment>\n  );\n}\n\nexport default MapVisualizer;\n"],"sourceRoot":""}